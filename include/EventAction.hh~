//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id$
//
/// \file EventAction.hh
/// \brief Definition of the EventAction class

#ifndef EventAction_h
#define EventAction_h 1
#include "G4ThreeVector.hh"
#include "G4UserEventAction.hh"
#include "globals.hh"
#include <vector>
#include <fstream>
class RunAction;
using namespace std;
/// Event action class
///

class EventAction : public G4UserEventAction
{
  public:
    EventAction(RunAction* runAction);
    virtual ~EventAction();

    virtual void BeginOfEventAction(const G4Event* event);
    virtual void EndOfEventAction(const G4Event* event);

    void AddEdep(G4double edep) { fEdep += edep; }
  // void SetPos(G4ThreeVector Position);
  G4double SetPosXR1=0.0;
  G4double SetPosYR1=0.0;
  G4double SetPosZR1=0.0;
  G4double SetPosXR2=0.0;
  G4double SetPosYR2=0.0;
  G4double SetPosZR2=0.0;
  G4double SetPosXR3=0.0;
  G4double SetPosYR3=0.0;
  G4double SetPosZR3=0.0;
  G4double SetPosXR4=0.0;
  G4double SetPosYR4=0.0;
  G4double SetPosZR4=0.0;
  G4double SetPosXR5=0.0;
  G4double SetPosYR5=0.0;
  G4double SetPosZR5=0.0;
  G4double SetPosXR6=0.0;
  G4double SetPosYR6=0.0;
  G4double SetPosZR6=0.0;
  G4double SetPosXR7=0.0;
  G4double SetPosYR7=0.0;
  G4double SetPosZR7=0.0;
  G4double SetPosXR8=0.0;
  G4double SetPosYR8=0.0;
  G4double SetPosZR8=0.0;
  vector<double> SetPosZ;
  fstream out1;
  G4double SetKE = 0.0;
  private:
    RunAction* fRunAction;
    G4double     fEdep;

};

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#endif

    
